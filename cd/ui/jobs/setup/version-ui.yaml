version:
  stage: setup
  extends:
    - .runner
  script:
    # Install jq if not already available (for updating package.json)
    - apt-get update && apt-get install -y jq

    # Check if version.env exists and read the previous version
    - if [ -f version.env ]; then
        SERVICE_VERSION=$(grep 'SERVICE_VERSION=' version.env | cut -d'=' -f2);
      else
        SERVICE_VERSION=$(cat package.json | jq -r '.version');
      fi

    # Increment the patch version (assumes semantic versioning)
    - IFS='.' read -r MAJOR MINOR PATCH <<< "$SERVICE_VERSION"
    - PATCH=$((PATCH + 1))
    - NEW_VERSION="$MAJOR.$MINOR.$PATCH"

    # Update only the version field in package.json
    - jq --arg new_version "$NEW_VERSION" '.version = $new_version' package.json > package.json.tmp
    - mv package.json.tmp package.json

    # Set the new version environment variables
    - IMAGE_VERSION=$CI_COMMIT_REF_SLUG-$NEW_VERSION-$CI_COMMIT_SHORT_SHA
    - echo "SERVICE_VERSION=$NEW_VERSION" > version.env
    - echo "IMAGE_VERSION=$IMAGE_VERSION" >> version.env

    # Output for debugging
    - echo "Updated Service Version = $NEW_VERSION"
    - cat version.env
  artifacts:
    reports:
      dotenv: version.env
    paths:
      - version.env
# version:
#   stage: setup
#   extends:
#     - .runner
#   script:
#     # Install jq if not already available (for updating package.json)
#     - apt-get update && apt-get install -y jq

#     # Check if version.env exists and read the previous version
#     - if [ -f version.env ]; then
#         SERVICE_VERSION=$(grep 'SERVICE_VERSION=' version.env | cut -d'=' -f2);
#       else
#         SERVICE_VERSION=$(cat package.json | jq -r '.version');
#       fi

#     # Increment the patch version (assumes semantic versioning)
#     - IFS='.' read -r MAJOR MINOR PATCH <<< "$SERVICE_VERSION"
#     - PATCH=$((PATCH + 1))
#     - NEW_VERSION="$MAJOR.$MINOR.$PATCH"

#     # Update only the version field in package.json
#     - jq --arg new_version "$NEW_VERSION" '.version = $new_version' package.json > package.json.tmp
#     - mv package.json.tmp package.json

#     # Set the new version environment variables
#     - IMAGE_VERSION=$CI_COMMIT_REF_SLUG-$NEW_VERSION-$CI_COMMIT_SHORT_SHA
#     - echo "SERVICE_VERSION=$NEW_VERSION" > version.env
#     - echo "IMAGE_VERSION=$IMAGE_VERSION" >> version.env

#     # Output for debugging
#     - echo "Updated Service Version = $NEW_VERSION"
#     - cat version.env
#   artifacts:
#     reports:
#       dotenv: version.env
#     paths:
#       - version.env